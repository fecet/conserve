# generated by datamodel-codegen:
#   filename:  tmpr7b3pza3
#   timestamp: 2025-09-29T17:01:08+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Literal

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    PositiveFloat,
    RootModel,
    conint,
    constr,
)


class DefaultMode(Enum):
    acceptEdits = "acceptEdits"
    bypassPermissions = "bypassPermissions"
    default = "default"
    plan = "plan"


class ForceLoginMethod(Enum):
    claudeai = "claudeai"
    console = "console"


class HookCommand(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["command"] = Field(..., description="Type of hook implementation")
    command: str = Field(..., description="Shell command to execute")
    timeout: PositiveFloat | None = Field(
        default=None,
        description="Optional timeout in seconds for this specific command",
    )


class HookMatcher(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    matcher: str | None = Field(
        default=None,
        description="String (e.g. Write) to match values related to the hook event, e.g. tool names",
    )
    hooks: List[HookCommand] = Field(..., description="Array of hooks to execute")


class PermissionRule(
    RootModel[
        constr(
            pattern=r"^((Agent|Bash|Edit|Glob|Grep|LS|MultiEdit|NotebookEdit|NotebookRead|Read|TodoRead|TodoWrite|WebFetch|WebSearch|Write)\(?|^mcp__)"
        )
    ]
):
    root: constr(
        pattern=r"^((Agent|Bash|Edit|Glob|Grep|LS|MultiEdit|NotebookEdit|NotebookRead|Read|TodoRead|TodoWrite|WebFetch|WebSearch|Write)\(?|^mcp__)"
    ) = Field(
        ...,
        description="Tool permission rule (e.g., 'Bash(ls:*)', 'Read(~/.zshrc)', 'WebFetch(domain:github.com)')",
    )


class Permissions(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    allow: List[PermissionRule] | None = Field(default=None, description="List of allowed tool permission rules")
    ask: List[PermissionRule] | None = Field(default=None, description="List of ask tool permission rules")
    deny: List[PermissionRule] | None = Field(default=None, description="List of denied tool permission rules")
    defaultMode: DefaultMode | None = Field(default=None, description="Default permission mode for tool execution")
    disableBypassPermissionsMode: Literal["disable"] = Field(
        default="disable", description="Disable bypass permissions mode"
    )
    additionalDirectories: List[str] | None = Field(
        default=None,
        description="Paths to additional directories Claude can access beyond the working directory",
    )


class Hooks(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    PreToolUse: List[HookMatcher] | None = Field(default=None, description="Hooks that run before tool calls")
    PostToolUse: List[HookMatcher] | None = Field(default=None, description="Hooks that run after tool completion")
    Notification: List[HookMatcher] | None = Field(default=None, description="Hooks that trigger on notifications")
    Stop: List[HookMatcher] | None = Field(default=None, description="Hooks that run when agents finish responding")
    SubagentStop: List[HookMatcher] | None = Field(
        default=None, description="Hooks that run when subagents finish responding"
    )
    ToolError: List[HookMatcher] | None = Field(default=None, description="Hooks that run when a tool call fails")
    SessionStart: List[HookMatcher] | None = Field(default=None, description="Hooks that run when a new session starts")
    SessionEnd: List[HookMatcher] | None = Field(default=None, description="Hooks that run when a session ends")


class Model(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    field_schema: str | None = Field(
        default=None,
        alias="$schema",
        description="The schema for the settings.json file",
    )
    apiKeyHelper: str | None = Field(default=None, description="Custom script path to generate an auth value")
    cleanupPeriodDays: conint(ge=0) | None = Field(
        default=30, description="How long to locally retain chat transcripts (in days)"
    )
    env: Dict[constr(pattern=r"^[A-Z_]+$"), str] | None = Field(
        default={}, description="Environment variables applied to every session"
    )
    includeCoAuthoredBy: bool | None = Field(
        default=True,
        description="Include 'co-authored-by Claude' byline in git commits and pull requests",
    )
    model: str | None = Field(
        default=None,
        description='Deprecated: use env.ANTHROPIC_MODEL and env.ANTHROPIC_SMALL_FAST_MODEL instead. Either "sonnet", "opus", or a specific Claude model ID (see https://docs.anthropic.com/en/docs/about-claude/models/overview)',
    )
    permissions: Permissions | None = Field(default=None, description="Tool permissions")
    enableAllProjectMcpServers: bool | None = Field(
        default=None,
        description="Whether to automatically approve all MCP servers in the project",
    )
    enabledMcpjsonServers: List[str] | None = Field(
        default=None, description="List of allowed MCP servers from .mcp.json"
    )
    disabledMcpjsonServers: List[str] | None = Field(
        default=None, description="List of denied MCP servers from .mcp.json"
    )
    hooks: Hooks | None = Field(
        default=None,
        description="Hooks configuration for executing commands at specific points in Claude Code's lifecycle",
    )
    forceLoginMethod: ForceLoginMethod | None = Field(
        default=None,
        description="Force a specific login method, and skip the login method selection screen",
    )
