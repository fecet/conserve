# generated by datamodel-codegen:
#   filename:  tmpfeob0_v0
#   timestamp: 2025-09-29T17:01:08+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Literal

from pydantic import (
    AnyUrl,
    BaseModel,
    ConfigDict,
    Field,
    PositiveFloat,
    RootModel,
    constr,
)


class Activation(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    env: Dict[str, constr(min_length=1)] | None = Field(
        default=None,
        description="A map of environment variables to values, used in the activation of the environment. These will be set in the shell. Thus these variables are shell specific. Using '$' might not expand to a value in different shells.",
        examples=[{"key": "value"}, {"ARGUMENT": "value"}],
        title="Env",
    )
    scripts: List[constr(min_length=1)] | None = Field(
        default=None,
        description="The scripts to run when the environment is activated",
        examples=["activate.sh", "activate.bat"],
        title="Scripts",
    )


class BuildTarget(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    config: Dict[str, Any] | None = Field(
        default=None,
        description="Target-specific configuration for the build backend",
        title="Config",
    )


class ChannelInlineTable(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    channel: constr(min_length=1) | AnyUrl = Field(
        ...,
        description="The channel the packages needs to be fetched from",
        title="Channel",
    )
    priority: int | None = Field(default=None, description="The priority of the channel", title="Priority")


class ChannelPriority(Enum):
    disabled = "disabled"
    strict = "strict"


class DependsOn(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    args: List[str | Dict[constr(pattern=r"^[a-zA-Z_][a-zA-Z\d_]*$"), str]] | None = Field(
        default=None,
        description="The (positional or named) arguments to pass to the task",
        title="Args",
    )
    environment: constr(pattern=r"^[a-z\d\-]+$") | None = Field(
        default=None,
        description="The environment to use for the task",
        title="Environment",
    )
    task: constr(pattern=r"^[^\s\$]+$") = Field(..., description="the name of the task to depend on", title="Task")


class Environment(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    features: List[constr(min_length=1)] | None = Field(
        default=None,
        description="The features that define the environment",
        title="Features",
    )
    no_default_feature: bool | None = Field(
        default=False,
        alias="no-default-feature",
        description="Whether to add the default feature to this environment",
        title="No-Default-Feature",
    )
    solve_group: constr(min_length=1) | None = Field(
        default=None,
        alias="solve-group",
        description="The group name for environments that should be solved together",
        title="Solve-Group",
    )


class FindLinksPath(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    path: constr(min_length=1) | None = Field(
        default=None,
        description="Path to the directory of packages",
        examples=["./links"],
        title="Path",
    )


class FindLinksURL(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: constr(min_length=1) | None = Field(
        default=None,
        description="URL to html file with href-links to packages",
        examples=["https://simple-index-is-here.com"],
        title="Url",
    )


class LibcFamily(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    family: constr(min_length=1) | None = Field(
        default=None,
        description="The family of the `libc`",
        examples=["glibc", "musl"],
        title="Family",
    )
    version: float | constr(min_length=1) | None = Field(
        default=None, description="The version of `libc`", title="Version"
    )


class MatchspecTable(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    branch: constr(min_length=1) | None = Field(default=None, description="A git branch to use", title="Branch")
    build: constr(min_length=1) | None = Field(
        default=None, description="The build string of the package", title="Build"
    )
    build_number: constr(min_length=1) | None = Field(
        default=None,
        alias="build-number",
        description="The build number of the package, can be a spec like `>=1` or `<=10` or `1`",
        title="Build-Number",
    )
    channel: constr(min_length=1) | None = Field(
        default=None,
        description="The channel the packages needs to be fetched from",
        examples=["conda-forge", "pytorch", "https://prefix.dev/conda-forge"],
        title="Channel",
    )
    file_name: constr(min_length=1) | None = Field(
        default=None,
        alias="file-name",
        description="The file name of the package",
        title="File-Name",
    )
    git: constr(min_length=1) | None = Field(default=None, description="The git URL to the repo", title="Git")
    license: constr(min_length=1) | None = Field(
        default=None, description="The license of the package", title="License"
    )
    md5: constr(pattern=r"^[a-fA-F0-9]{32}$") | None = Field(
        default=None, description="The md5 hash of the package", title="Md5"
    )
    path: constr(min_length=1) | None = Field(default=None, description="The path to the package", title="Path")
    rev: constr(min_length=1) | None = Field(default=None, description="A git SHA revision to use", title="Rev")
    sha256: constr(pattern=r"^[a-fA-F0-9]{64}$") | None = Field(
        default=None, description="The sha256 hash of the package", title="Sha256"
    )
    subdir: constr(min_length=1) | None = Field(
        default=None,
        description="The subdir of the package, also known as platform",
        title="Subdir",
    )
    subdirectory: constr(min_length=1) | None = Field(
        default=None,
        description="A subdirectory to use in the repo",
        title="Subdirectory",
    )
    tag: constr(min_length=1) | None = Field(default=None, description="A git tag to use", title="Tag")
    url: constr(min_length=1) | None = Field(default=None, description="The URL to the package", title="Url")
    version: constr(min_length=1) | None = Field(
        default=None,
        description="The version of the package in [MatchSpec](https://github.com/conda/conda/blob/078e7ee79381060217e1ec7f9b0e9cf80ecc8f3f/conda/models/match_spec.py) format",
        title="Version",
    )


class Platform(Enum):
    emscripten_wasm32 = "emscripten-wasm32"
    linux_32 = "linux-32"
    linux_64 = "linux-64"
    linux_aarch64 = "linux-aarch64"
    linux_armv6l = "linux-armv6l"
    linux_armv7l = "linux-armv7l"
    linux_ppc64 = "linux-ppc64"
    linux_ppc64le = "linux-ppc64le"
    linux_riscv32 = "linux-riscv32"
    linux_riscv64 = "linux-riscv64"
    linux_s390x = "linux-s390x"
    noarch = "noarch"
    osx_64 = "osx-64"
    osx_arm64 = "osx-arm64"
    unknown = "unknown"
    wasi_wasm32 = "wasi-wasm32"
    win_32 = "win-32"
    win_64 = "win-64"
    win_arm64 = "win-arm64"
    zos_z = "zos-z"


class PyPIGitBranchRequirement(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    branch: constr(min_length=1) | None = Field(default=None, description="A `git` branch to use", title="Branch")
    extras: List[constr(min_length=1)] | None = Field(
        default=None,
        description="The [PEP 508 extras](https://peps.python.org/pep-0508/#extras) of the package",
        title="Extras",
    )
    git: constr(min_length=1) | None = Field(
        default=None,
        description="The `git` URL to the repo e.g https://github.com/prefix-dev/pixi",
        title="Git",
    )
    subdirectory: constr(min_length=1) | None = Field(
        default=None,
        description="The subdirectory in the repo, a path from the root of the repo.",
        title="Subdirectory",
    )


class PyPIGitRevRequirement(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    extras: List[constr(min_length=1)] | None = Field(
        default=None,
        description="The [PEP 508 extras](https://peps.python.org/pep-0508/#extras) of the package",
        title="Extras",
    )
    git: constr(min_length=1) | None = Field(
        default=None,
        description="The `git` URL to the repo e.g https://github.com/prefix-dev/pixi",
        title="Git",
    )
    rev: constr(min_length=1) | None = Field(default=None, description="A `git` SHA revision to use", title="Rev")
    subdirectory: constr(min_length=1) | None = Field(
        default=None,
        description="The subdirectory in the repo, a path from the root of the repo.",
        title="Subdirectory",
    )


class PyPIGitTagRequirement(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    extras: List[constr(min_length=1)] | None = Field(
        default=None,
        description="The [PEP 508 extras](https://peps.python.org/pep-0508/#extras) of the package",
        title="Extras",
    )
    git: constr(min_length=1) | None = Field(
        default=None,
        description="The `git` URL to the repo e.g https://github.com/prefix-dev/pixi",
        title="Git",
    )
    subdirectory: constr(min_length=1) | None = Field(
        default=None,
        description="The subdirectory in the repo, a path from the root of the repo.",
        title="Subdirectory",
    )
    tag: constr(min_length=1) | None = Field(default=None, description="A `git` tag to use", title="Tag")


class PyPIPathRequirement(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    editable: bool | None = Field(
        default=None,
        description="If `true` the package will be installed as editable",
        title="Editable",
    )
    extras: List[constr(min_length=1)] | None = Field(
        default=None,
        description="The [PEP 508 extras](https://peps.python.org/pep-0508/#extras) of the package",
        title="Extras",
    )
    path: constr(min_length=1) | None = Field(
        default=None, description="A path to a local source or wheel", title="Path"
    )
    subdirectory: constr(min_length=1) | None = Field(
        default=None,
        description="The subdirectory in the repo, a path from the root of the repo.",
        title="Subdirectory",
    )


class PyPIUrlRequirement(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    extras: List[constr(min_length=1)] | None = Field(
        default=None,
        description="The [PEP 508 extras](https://peps.python.org/pep-0508/#extras) of the package",
        title="Extras",
    )
    url: constr(min_length=1) | None = Field(default=None, description="A URL to a remote source or wheel", title="Url")


class PyPIVersion(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    extras: List[constr(min_length=1)] | None = Field(
        default=None,
        description="The [PEP 508 extras](https://peps.python.org/pep-0508/#extras) of the package",
        title="Extras",
    )
    index: constr(min_length=1) | None = Field(
        default=None, description="The index to fetch the package from", title="Index"
    )
    version: constr(min_length=1) | None = Field(
        default=None,
        description="The version of the package in [PEP 440](https://www.python.org/dev/peps/pep-0440/) format",
        title="Version",
    )


class S3Options(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    endpoint_url: constr(min_length=1) = Field(
        ...,
        alias="endpoint-url",
        description="The endpoint URL to use for the S3 client",
        examples=["https://s3.eu-central-1.amazonaws.com"],
        title="Endpoint-Url",
    )
    force_path_style: bool = Field(
        ...,
        alias="force-path-style",
        description="Whether to force path style for the S3 client",
        title="Force-Path-Style",
    )
    region: constr(min_length=1) = Field(
        ...,
        description="The region to use for the S3 client",
        examples=["eu-central-1"],
        title="Region",
    )


class SourceLocation(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    path: constr(min_length=1) | None = Field(default=None, description="The path to the source", title="Path")


class SystemRequirements(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    archspec: constr(min_length=1) | None = Field(
        default=None,
        description="The architecture the project supports",
        title="Archspec",
    )
    cuda: float | constr(min_length=1) | None = Field(
        default=None, description="The minimum version of CUDA", title="Cuda"
    )
    libc: LibcFamily | float | constr(min_length=1) | None = Field(
        default=None, description="The minimum version of `libc`", title="Libc"
    )
    linux: PositiveFloat | constr(min_length=1) | None = Field(
        default=None,
        description="The minimum version of the Linux kernel",
        title="Linux",
    )
    macos: PositiveFloat | constr(min_length=1) | None = Field(
        default=None, description="The minimum version of MacOS", title="Macos"
    )
    unix: bool | constr(min_length=1) | None = Field(
        default=None,
        description="Whether the project supports UNIX",
        examples=["true"],
        title="Unix",
    )


class TaskArgs(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    arg: constr(pattern=r"^[a-zA-Z_][a-zA-Z\d_]*$") = Field(..., description="The name of the argument", title="Arg")
    default: str | None = Field(default=None, description="The default value of the argument", title="Default")


class TaskInlineTable(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    args: List[TaskArgs | constr(pattern=r"^[a-zA-Z_][a-zA-Z\d_]*$")] | None = Field(
        default=None,
        description="The arguments to a task",
        examples=[["arg1", "arg2"], ["arg", {"arg": "arg2", "default": "2"}]],
        title="Args",
    )
    clean_env: bool | None = Field(
        default=None,
        alias="clean-env",
        description="Whether to run in a clean environment, removing all environment variables except those defined in `env` and by pixi itself.",
        title="Clean-Env",
    )
    cmd: List[constr(min_length=1)] | constr(min_length=1) | None = Field(
        default=None,
        description="A shell command to run the task in the limited, but cross-platform `bash`-like `deno_task_shell`. See the documentation for [supported syntax](https://pixi.sh/latest/environments/advanced_tasks/#syntax)",
        title="Cmd",
    )
    cwd: constr(pattern=r"^[^\\]+$") | None = Field(
        default=None, description="The working directory to run the task", title="Cwd"
    )
    depends_on: List[DependsOn | constr(pattern=r"^[^\s\$]+$")] | DependsOn | constr(pattern=r"^[^\s\$]+$") | None = (
        Field(
            default=None,
            alias="depends-on",
            description="The tasks that this task depends on. Environment variables will **not** be expanded.",
            title="Depends-On",
        )
    )
    depends_on_1: List[constr(pattern=r"^[^\s\$]+$")] | constr(pattern=r"^[^\s\$]+$") | None = Field(
        default=None,
        alias="depends_on",
        description="The tasks that this task depends on. Environment variables will **not** be expanded. Deprecated in favor of `depends-on` from v0.21.0 onward.",
        title="Depends On",
    )
    description: constr(min_length=1) | None = Field(
        default=None,
        description="A short description of the task",
        examples=["Build the project"],
        title="Description",
    )
    env: Dict[str, constr(min_length=1)] | None = Field(
        default=None,
        description="A map of environment variables to values, used in the task, these will be overwritten by the shell.",
        examples=[{"key": "value"}, {"ARGUMENT": "value"}],
        title="Env",
    )
    inputs: List[constr(min_length=1)] | None = Field(
        default=None,
        description="A list of `.gitignore`-style glob patterns that should be watched for changes before this command is run. Environment variables _will_ be expanded.",
        title="Inputs",
    )
    outputs: List[constr(min_length=1)] | None = Field(
        default=None,
        description="A list of `.gitignore`-style glob patterns that are generated by this command. Environment variables _will_ be expanded.",
        title="Outputs",
    )


class WorkspaceInheritance(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    workspace: Literal[True] = Field(..., description="Must be true to inherit from workspace", title="Workspace")


class WorkspaceTarget(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    build_variants: Dict[str, List[str]] | None = Field(
        default=None,
        alias="build-variants",
        description="The build variants for this workspace target",
        title="Build-Variants",
    )


class BuildBackend(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    additional_dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        alias="additional-dependencies",
        description="Additional dependencies to install alongside the build backend",
        title="Additional-Dependencies",
    )
    branch: constr(min_length=1) | None = Field(default=None, description="A git branch to use", title="Branch")
    build: constr(min_length=1) | None = Field(
        default=None, description="The build string of the package", title="Build"
    )
    build_number: constr(min_length=1) | None = Field(
        default=None,
        alias="build-number",
        description="The build number of the package, can be a spec like `>=1` or `<=10` or `1`",
        title="Build-Number",
    )
    channel: constr(min_length=1) | None = Field(
        default=None,
        description="The channel the packages needs to be fetched from",
        examples=["conda-forge", "pytorch", "https://prefix.dev/conda-forge"],
        title="Channel",
    )
    channels: List[constr(min_length=1) | AnyUrl | ChannelInlineTable] | None = Field(
        default=None,
        description="The `conda` channels that are used to fetch the build backend from",
        title="Channels",
    )
    file_name: constr(min_length=1) | None = Field(
        default=None,
        alias="file-name",
        description="The file name of the package",
        title="File-Name",
    )
    git: constr(min_length=1) | None = Field(default=None, description="The git URL to the repo", title="Git")
    license: constr(min_length=1) | None = Field(
        default=None, description="The license of the package", title="License"
    )
    md5: constr(pattern=r"^[a-fA-F0-9]{32}$") | None = Field(
        default=None, description="The md5 hash of the package", title="Md5"
    )
    name: constr(min_length=1) | None = Field(
        default=None, description="The name of the build backend package", title="Name"
    )
    path: constr(min_length=1) | None = Field(default=None, description="The path to the package", title="Path")
    rev: constr(min_length=1) | None = Field(default=None, description="A git SHA revision to use", title="Rev")
    sha256: constr(pattern=r"^[a-fA-F0-9]{64}$") | None = Field(
        default=None, description="The sha256 hash of the package", title="Sha256"
    )
    subdir: constr(min_length=1) | None = Field(
        default=None,
        description="The subdir of the package, also known as platform",
        title="Subdir",
    )
    subdirectory: constr(min_length=1) | None = Field(
        default=None,
        description="A subdirectory to use in the repo",
        title="Subdirectory",
    )
    tag: constr(min_length=1) | None = Field(default=None, description="A git tag to use", title="Tag")
    url: constr(min_length=1) | None = Field(default=None, description="The URL to the package", title="Url")
    version: constr(min_length=1) | None = Field(
        default=None,
        description="The version of the package in [MatchSpec](https://github.com/conda/conda/blob/078e7ee79381060217e1ec7f9b0e9cf80ecc8f3f/conda/models/match_spec.py) format",
        title="Version",
    )


class PyPIOptions(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    dependency_overrides: (
        Dict[
            str,
            constr(min_length=1)
            | PyPIVersion
            | PyPIGitBranchRequirement
            | PyPIGitTagRequirement
            | PyPIGitRevRequirement
            | PyPIPathRequirement
            | PyPIUrlRequirement,
        ]
        | None
    ) = Field(
        default=None,
        alias="dependency-overrides",
        description="A list of PyPI dependencies that override the resolved dependencies",
        examples=[{"numpy": ">=1.21.0"}],
        title="Dependency-Overrides",
    )
    extra_index_urls: List[constr(min_length=1)] | None = Field(
        default=None,
        alias="extra-index-urls",
        description="Additional PyPI registries that should be used as extra indexes",
        examples=[["https://pypi.org/simple"]],
        title="Extra-Index-Urls",
    )
    find_links: List[FindLinksPath | FindLinksURL] | None = Field(
        default=None,
        alias="find-links",
        description="Paths to directory containing",
        examples=[["https://pypi.org/simple"]],
        title="Find-Links",
    )
    index_strategy: str | None = Field(
        default=None,
        alias="index-strategy",
        description="The strategy to use when resolving packages from multiple indexes",
        examples=["first-index", "unsafe-first-match", "unsafe-best-match"],
        title="Index-Strategy",
    )
    index_url: constr(min_length=1) | None = Field(
        default=None,
        alias="index-url",
        description="PyPI registry that should be used as the primary index",
        examples=["https://pypi.org/simple"],
        title="Index-Url",
    )
    no_binary: bool | List[constr(min_length=1)] | None = Field(
        default=None,
        alias="no-binary",
        description="Don't use pre-built wheels for these packages",
        examples=["true", "false"],
        title="No-Binary",
    )
    no_build: bool | List[constr(min_length=1)] | None = Field(
        default=None,
        alias="no-build",
        description="Packages that should NOT be built",
        examples=["true", "false"],
        title="No-Build",
    )
    no_build_isolation: bool | List[constr(min_length=1)] | None = Field(
        default=None,
        alias="no-build-isolation",
        description="Packages that should NOT be isolated during the build process",
        examples=[["numpy"], True],
        title="No-Build-Isolation",
    )


class Target(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    activation: Activation | None = Field(
        default=None,
        description="The scripts used on the activation of the project for this target",
    )
    build_dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        alias="build-dependencies",
        description="The build `conda` dependencies, used in the build process. See https://pixi.sh/latest/build/dependency_types/ for more information.",
        title="Build-Dependencies",
    )
    dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        description="The `conda` dependencies, consisting of a package name and a requirement in [MatchSpec](https://github.com/conda/conda/blob/078e7ee79381060217e1ec7f9b0e9cf80ecc8f3f/conda/models/match_spec.py) format",
        title="Dependencies",
    )
    host_dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        alias="host-dependencies",
        description="The host `conda` dependencies, used in the build process. See https://pixi.sh/latest/build/dependency_types/ for more information.",
        examples=[{"python": ">=3.8"}],
        title="Host-Dependencies",
    )
    pypi_dependencies: (
        Dict[
            str,
            constr(min_length=1)
            | PyPIVersion
            | PyPIGitBranchRequirement
            | PyPIGitTagRequirement
            | PyPIGitRevRequirement
            | PyPIPathRequirement
            | PyPIUrlRequirement,
        ]
        | None
    ) = Field(
        default=None,
        alias="pypi-dependencies",
        description="The PyPI dependencies for this target",
        title="Pypi-Dependencies",
    )
    tasks: (
        Dict[
            constr(pattern=r"^[^\s\$]+$"),
            TaskInlineTable | List[DependsOn] | constr(min_length=1),
        ]
        | None
    ) = Field(default=None, description="The tasks of the target", title="Tasks")


class Workspace(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    authors: List[constr(min_length=1)] | None = Field(
        default=None,
        description="The authors of the project",
        examples=["John Doe <j.doe@prefix.dev>"],
        title="Authors",
    )
    build_variants: Dict[str, List[str]] | None = Field(
        default=None,
        alias="build-variants",
        description="The build variants of the project",
        title="Build-Variants",
    )
    channel_priority: ChannelPriority | None = Field(
        default=None,
        alias="channel-priority",
        description="The type of channel priority that is used in the solve.\n- 'strict': only take the package from the channel it exist in first.\n- 'disabled': group all dependencies together as if there is no channel difference.",
        examples=["strict", "disabled"],
    )
    channels: List[constr(min_length=1) | AnyUrl | ChannelInlineTable] = Field(
        ...,
        description="The `conda` channels that can be used in the project. Unless overridden by `priority`, the first channel listed will be preferred.",
        title="Channels",
    )
    conda_pypi_map: Dict[str, AnyUrl | constr(min_length=1)] | None = Field(
        default=None,
        alias="conda-pypi-map",
        description="The `conda` to PyPI mapping configuration",
        title="Conda-Pypi-Map",
    )
    description: constr(min_length=1) | None = Field(
        default=None,
        description="A short description of the project",
        title="Description",
    )
    documentation: AnyUrl | None = Field(
        default=None,
        description="The URL of the documentation of the project",
        title="Documentation",
    )
    exclude_newer: constr(pattern=r"^\d{4}-\d{2}-\d{2}([T ]\d{2}:\d{2}:\d{2}(Z|[+-]\d{2}:\d{2}))?$") | None = Field(
        default=None,
        alias="exclude-newer",
        description="Exclude any package newer than this date",
        examples=["2023-11-03", "2023-11-03T03:33:12Z"],
        title="Exclude-Newer",
    )
    homepage: AnyUrl | None = Field(
        default=None,
        description="The URL of the homepage of the project",
        title="Homepage",
    )
    license: constr(min_length=1) | None = Field(
        default=None,
        description="The license of the project; we advise using an [SPDX](https://spdx.org/licenses/) identifier.",
        title="License",
    )
    license_file: constr(pattern=r"^[^\\]+$") | None = Field(
        default=None,
        alias="license-file",
        description="The path to the license file of the project",
        title="License-File",
    )
    name: constr(min_length=1) | None = Field(
        default=None,
        description="The name of the project; we advise use of the name of the repository",
        title="Name",
    )
    platforms: List[Platform] | None = Field(
        default=None,
        description="The platforms that the project supports",
        title="Platforms",
    )
    preview: List[str] | bool | None = Field(
        default=None,
        description="Defines the enabling of preview features of the project",
        title="Preview",
    )
    pypi_options: PyPIOptions | None = Field(
        default=None,
        alias="pypi-options",
        description="Options related to PyPI indexes for this project",
    )
    readme: constr(pattern=r"^[^\\]+$") | None = Field(
        default=None,
        description="The path to the readme file of the project",
        title="Readme",
    )
    repository: AnyUrl | None = Field(
        default=None,
        description="The URL of the repository of the project",
        title="Repository",
    )
    requires_pixi: constr(min_length=1) | None = Field(
        default=None,
        alias="requires-pixi",
        description="The required version spec for pixi itself to resolve and build the project.",
        examples=[">=0.40"],
        title="Requires-Pixi",
    )
    s3_options: Dict[str, S3Options] | None = Field(
        default=None,
        alias="s3-options",
        description="Options related to S3 for this project",
        title="S3-Options",
    )
    target: Dict[str, WorkspaceTarget] | None = Field(default=None, description="The workspace targets", title="Target")
    version: constr(min_length=1) | None = Field(
        default=None,
        description="The version of the project; we advise use of [SemVer](https://semver.org)",
        examples=["1.2.3"],
        title="Version",
    )


class Build(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    additional_dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        alias="additional-dependencies",
        description="Additional dependencies to install alongside the build backend",
        title="Additional-Dependencies",
    )
    backend: BuildBackend = Field(..., description="The build backend to instantiate")
    channels: List[constr(min_length=1) | AnyUrl | ChannelInlineTable] | None = Field(
        default=None,
        description="The `conda` channels that are used to fetch the build backend from",
        title="Channels",
    )
    config: Dict[str, Any] | None = Field(
        default=None,
        description="The configuration of the build backend",
        title="Config",
    )
    source: SourceLocation | None = Field(
        default=None,
        description="The source from which to build the package",
        examples=[{"path": "project"}],
    )
    target: Dict[str, BuildTarget] | None = Field(
        default=None,
        description="Target-specific build configuration for different platforms",
        examples=[{"linux-64": {"config": {"key": "value"}}}],
        title="Target",
    )


class Feature(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    activation: Activation | None = Field(
        default=None,
        description="The scripts used on the activation of environments using this feature",
    )
    build_dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        alias="build-dependencies",
        description="The build `conda` dependencies, used in the build process. See https://pixi.sh/latest/build/dependency_types/ for more information.",
        title="Build-Dependencies",
    )
    channel_priority: ChannelPriority | None = Field(
        default=None,
        alias="channel-priority",
        description="The type of channel priority that is used in the solve.\n- 'strict': only take the package from the channel it exist in first.\n- 'disabled': group all dependencies together as if there is no channel difference.",
        examples=["strict", "disabled"],
    )
    channels: List[constr(min_length=1) | AnyUrl | ChannelInlineTable] | None = Field(
        default=None,
        description="The `conda` channels that can be considered when solving environments containing this feature",
        title="Channels",
    )
    dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        description="The `conda` dependencies, consisting of a package name and a requirement in [MatchSpec](https://github.com/conda/conda/blob/078e7ee79381060217e1ec7f9b0e9cf80ecc8f3f/conda/models/match_spec.py) format",
        title="Dependencies",
    )
    host_dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        alias="host-dependencies",
        description="The host `conda` dependencies, used in the build process. See https://pixi.sh/latest/build/dependency_types/ for more information.",
        examples=[{"python": ">=3.8"}],
        title="Host-Dependencies",
    )
    platforms: List[Platform] | None = Field(
        default=None,
        description="The platforms that the feature supports: a union of all features combined in one environment is used for the environment.",
        title="Platforms",
    )
    pypi_dependencies: (
        Dict[
            str,
            constr(min_length=1)
            | PyPIVersion
            | PyPIGitBranchRequirement
            | PyPIGitTagRequirement
            | PyPIGitRevRequirement
            | PyPIPathRequirement
            | PyPIUrlRequirement,
        ]
        | None
    ) = Field(
        default=None,
        alias="pypi-dependencies",
        description="The PyPI dependencies of this feature",
        title="Pypi-Dependencies",
    )
    pypi_options: PyPIOptions | None = Field(
        default=None,
        alias="pypi-options",
        description="Options related to PyPI indexes for this feature",
    )
    system_requirements: SystemRequirements | None = Field(
        default=None,
        alias="system-requirements",
        description="The system requirements of this feature",
    )
    target: Dict[str, Target] | None = Field(
        default=None,
        description="Machine-specific aspects of this feature",
        examples=[{"linux": {"dependencies": {"python": "3.8"}}}],
        title="Target",
    )
    tasks: (
        Dict[
            constr(pattern=r"^[^\s\$]+$"),
            TaskInlineTable | List[DependsOn] | constr(min_length=1),
        ]
        | None
    ) = Field(default=None, description="The tasks provided by this feature", title="Tasks")


class Package(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    authors: List[constr(min_length=1)] | WorkspaceInheritance | None = Field(
        default=None,
        description="The authors of the project. Can be a list of strings or { workspace = true } to inherit from workspace",
        examples=[["John Doe <j.doe@prefix.dev>"], {"workspace": True}],
        title="Authors",
    )
    build: Build = Field(..., description="The build configuration of the package")
    build_dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        alias="build-dependencies",
        description="The build `conda` dependencies, used in the build process. See https://pixi.sh/latest/build/dependency_types/ for more information.",
        title="Build-Dependencies",
    )
    description: constr(min_length=1) | WorkspaceInheritance | None = Field(
        default=None,
        description="A short description of the project. Can be a string or { workspace = true } to inherit from workspace",
        title="Description",
    )
    documentation: AnyUrl | WorkspaceInheritance | None = Field(
        default=None,
        description="The URL of the documentation of the project. Can be a URL or { workspace = true } to inherit from workspace",
        title="Documentation",
    )
    homepage: AnyUrl | WorkspaceInheritance | None = Field(
        default=None,
        description="The URL of the homepage of the project. Can be a URL or { workspace = true } to inherit from workspace",
        title="Homepage",
    )
    host_dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        alias="host-dependencies",
        description="The host `conda` dependencies, used in the build process. See https://pixi.sh/latest/build/dependency_types/ for more information.",
        examples=[{"python": ">=3.8"}],
        title="Host-Dependencies",
    )
    license: constr(min_length=1) | WorkspaceInheritance | None = Field(
        default=None,
        description="The license of the project; we advise using an [SPDX](https://spdx.org/licenses/) identifier. Can be a string or { workspace = true } to inherit from workspace",
        title="License",
    )
    license_file: constr(pattern=r"^[^\\]+$") | WorkspaceInheritance | None = Field(
        default=None,
        alias="license-file",
        description="The path to the license file of the project. Can be a path or { workspace = true } to inherit from workspace",
        title="License-File",
    )
    name: constr(min_length=1) | WorkspaceInheritance | None = Field(
        default=None,
        description="The name of the package. Can be a string or { workspace = true } to inherit from workspace",
        title="Name",
    )
    readme: constr(pattern=r"^[^\\]+$") | WorkspaceInheritance | None = Field(
        default=None,
        description="The path to the readme file of the project. Can be a path or { workspace = true } to inherit from workspace",
        title="Readme",
    )
    repository: AnyUrl | WorkspaceInheritance | None = Field(
        default=None,
        description="The URL of the repository of the project. Can be a URL or { workspace = true } to inherit from workspace",
        title="Repository",
    )
    run_dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        alias="run-dependencies",
        description="The `conda` dependencies required at runtime. See https://pixi.sh/latest/build/dependency_types/ for more information.",
        title="Run-Dependencies",
    )
    target: Dict[str, Target] | None = Field(
        default=None,
        description="Machine-specific aspects of the package",
        examples=[{"linux": {"host-dependencies": {"python": "3.8"}}}],
        title="Target",
    )
    version: constr(min_length=1) | WorkspaceInheritance | None = Field(
        default=None,
        description="The version of the project; we advise use of [SemVer](https://semver.org). Can be a string or { workspace = true } to inherit from workspace",
        examples=["1.2.3", {"workspace": True}],
        title="Version",
    )


class PixiTomlManifestFile1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    field_schema: str | None = Field(
        default="https://pixi.sh/v0.55.0/schema/manifest/schema.json",
        alias="$schema",
        description="The schema identifier for the project's configuration",
        title="Schema",
    )
    activation: Activation | None = Field(default=None, description="The scripts used on the activation of the project")
    build_dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        alias="build-dependencies",
        description="The build `conda` dependencies, used in the build process. See https://pixi.sh/latest/build/dependency_types/ for more information.",
        title="Build-Dependencies",
    )
    dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        description="The `conda` dependencies, consisting of a package name and a requirement in [MatchSpec](https://github.com/conda/conda/blob/078e7ee79381060217e1ec7f9b0e9cf80ecc8f3f/conda/models/match_spec.py) format",
        title="Dependencies",
    )
    environments: Dict[constr(pattern=r"^[a-z\d\-]+$"), Environment | List[constr(min_length=1)]] | None = Field(
        default=None,
        description="The environments of the project, defined as a full object or a list of feature names.",
        title="Environments",
    )
    feature: Dict[str, Feature] | None = Field(default=None, description="The features of the project", title="Feature")
    host_dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        alias="host-dependencies",
        description="The host `conda` dependencies, used in the build process. See https://pixi.sh/latest/build/dependency_types/ for more information.",
        examples=[{"python": ">=3.8"}],
        title="Host-Dependencies",
    )
    package: Package | None = Field(default=None, description="The package's metadata information")
    project: Workspace = Field(..., description="The project's metadata information")
    pypi_dependencies: (
        Dict[
            str,
            constr(min_length=1)
            | PyPIVersion
            | PyPIGitBranchRequirement
            | PyPIGitTagRequirement
            | PyPIGitRevRequirement
            | PyPIPathRequirement
            | PyPIUrlRequirement,
        ]
        | None
    ) = Field(
        default=None,
        alias="pypi-dependencies",
        description="The PyPI dependencies",
        title="Pypi-Dependencies",
    )
    pypi_options: PyPIOptions | None = Field(
        default=None,
        alias="pypi-options",
        description="Options related to PyPI indexes, on the default feature",
    )
    system_requirements: SystemRequirements | None = Field(
        default=None,
        alias="system-requirements",
        description="The system requirements of the project",
    )
    target: Dict[str, Target] | None = Field(
        default=None,
        description="The targets of the project",
        examples=[{"linux": {"dependencies": {"python": "3.8"}}}],
        title="Target",
    )
    tasks: (
        Dict[
            constr(pattern=r"^[^\s\$]+$"),
            TaskInlineTable | List[DependsOn] | constr(min_length=1),
        ]
        | None
    ) = Field(default=None, description="The tasks of the project", title="Tasks")
    tool: Dict[str, Any] | None = Field(
        default=None,
        description="Third-party tool configurations, ignored by pixi",
        title="Tool",
    )
    workspace: Workspace | None = Field(default=None, description="The workspace's metadata information")


class PixiTomlManifestFile2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    field_schema: str | None = Field(
        default="https://pixi.sh/v0.55.0/schema/manifest/schema.json",
        alias="$schema",
        description="The schema identifier for the project's configuration",
        title="Schema",
    )
    activation: Activation | None = Field(default=None, description="The scripts used on the activation of the project")
    build_dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        alias="build-dependencies",
        description="The build `conda` dependencies, used in the build process. See https://pixi.sh/latest/build/dependency_types/ for more information.",
        title="Build-Dependencies",
    )
    dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        description="The `conda` dependencies, consisting of a package name and a requirement in [MatchSpec](https://github.com/conda/conda/blob/078e7ee79381060217e1ec7f9b0e9cf80ecc8f3f/conda/models/match_spec.py) format",
        title="Dependencies",
    )
    environments: Dict[constr(pattern=r"^[a-z\d\-]+$"), Environment | List[constr(min_length=1)]] | None = Field(
        default=None,
        description="The environments of the project, defined as a full object or a list of feature names.",
        title="Environments",
    )
    feature: Dict[str, Feature] | None = Field(default=None, description="The features of the project", title="Feature")
    host_dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        alias="host-dependencies",
        description="The host `conda` dependencies, used in the build process. See https://pixi.sh/latest/build/dependency_types/ for more information.",
        examples=[{"python": ">=3.8"}],
        title="Host-Dependencies",
    )
    package: Package | None = Field(default=None, description="The package's metadata information")
    project: Workspace | None = Field(default=None, description="The project's metadata information")
    pypi_dependencies: (
        Dict[
            str,
            constr(min_length=1)
            | PyPIVersion
            | PyPIGitBranchRequirement
            | PyPIGitTagRequirement
            | PyPIGitRevRequirement
            | PyPIPathRequirement
            | PyPIUrlRequirement,
        ]
        | None
    ) = Field(
        default=None,
        alias="pypi-dependencies",
        description="The PyPI dependencies",
        title="Pypi-Dependencies",
    )
    pypi_options: PyPIOptions | None = Field(
        default=None,
        alias="pypi-options",
        description="Options related to PyPI indexes, on the default feature",
    )
    system_requirements: SystemRequirements | None = Field(
        default=None,
        alias="system-requirements",
        description="The system requirements of the project",
    )
    target: Dict[str, Target] | None = Field(
        default=None,
        description="The targets of the project",
        examples=[{"linux": {"dependencies": {"python": "3.8"}}}],
        title="Target",
    )
    tasks: (
        Dict[
            constr(pattern=r"^[^\s\$]+$"),
            TaskInlineTable | List[DependsOn] | constr(min_length=1),
        ]
        | None
    ) = Field(default=None, description="The tasks of the project", title="Tasks")
    tool: Dict[str, Any] | None = Field(
        default=None,
        description="Third-party tool configurations, ignored by pixi",
        title="Tool",
    )
    workspace: Workspace = Field(..., description="The workspace's metadata information")


class PixiTomlManifestFile3(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    field_schema: str | None = Field(
        default="https://pixi.sh/v0.55.0/schema/manifest/schema.json",
        alias="$schema",
        description="The schema identifier for the project's configuration",
        title="Schema",
    )
    activation: Activation | None = Field(default=None, description="The scripts used on the activation of the project")
    build_dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        alias="build-dependencies",
        description="The build `conda` dependencies, used in the build process. See https://pixi.sh/latest/build/dependency_types/ for more information.",
        title="Build-Dependencies",
    )
    dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        description="The `conda` dependencies, consisting of a package name and a requirement in [MatchSpec](https://github.com/conda/conda/blob/078e7ee79381060217e1ec7f9b0e9cf80ecc8f3f/conda/models/match_spec.py) format",
        title="Dependencies",
    )
    environments: Dict[constr(pattern=r"^[a-z\d\-]+$"), Environment | List[constr(min_length=1)]] | None = Field(
        default=None,
        description="The environments of the project, defined as a full object or a list of feature names.",
        title="Environments",
    )
    feature: Dict[str, Feature] | None = Field(default=None, description="The features of the project", title="Feature")
    host_dependencies: Dict[str, constr(min_length=1) | MatchspecTable] | None = Field(
        default=None,
        alias="host-dependencies",
        description="The host `conda` dependencies, used in the build process. See https://pixi.sh/latest/build/dependency_types/ for more information.",
        examples=[{"python": ">=3.8"}],
        title="Host-Dependencies",
    )
    package: Package = Field(..., description="The package's metadata information")
    project: Workspace | None = Field(default=None, description="The project's metadata information")
    pypi_dependencies: (
        Dict[
            str,
            constr(min_length=1)
            | PyPIVersion
            | PyPIGitBranchRequirement
            | PyPIGitTagRequirement
            | PyPIGitRevRequirement
            | PyPIPathRequirement
            | PyPIUrlRequirement,
        ]
        | None
    ) = Field(
        default=None,
        alias="pypi-dependencies",
        description="The PyPI dependencies",
        title="Pypi-Dependencies",
    )
    pypi_options: PyPIOptions | None = Field(
        default=None,
        alias="pypi-options",
        description="Options related to PyPI indexes, on the default feature",
    )
    system_requirements: SystemRequirements | None = Field(
        default=None,
        alias="system-requirements",
        description="The system requirements of the project",
    )
    target: Dict[str, Target] | None = Field(
        default=None,
        description="The targets of the project",
        examples=[{"linux": {"dependencies": {"python": "3.8"}}}],
        title="Target",
    )
    tasks: (
        Dict[
            constr(pattern=r"^[^\s\$]+$"),
            TaskInlineTable | List[DependsOn] | constr(min_length=1),
        ]
        | None
    ) = Field(default=None, description="The tasks of the project", title="Tasks")
    tool: Dict[str, Any] | None = Field(
        default=None,
        description="Third-party tool configurations, ignored by pixi",
        title="Tool",
    )
    workspace: Workspace | None = Field(default=None, description="The workspace's metadata information")


class PixiTomlManifestFile(RootModel[PixiTomlManifestFile1 | PixiTomlManifestFile2 | PixiTomlManifestFile3]):
    root: PixiTomlManifestFile1 | PixiTomlManifestFile2 | PixiTomlManifestFile3 = Field(
        ...,
        description="The configuration for a [`pixi`](https://pixi.sh) project.",
        title="`pixi.toml` manifest file",
    )
