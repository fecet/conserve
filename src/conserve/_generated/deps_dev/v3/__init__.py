# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: api.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Advisory",
    "AdvisoryKey",
    "Attestation",
    "Dependencies",
    "DependenciesEdge",
    "DependenciesNode",
    "DependencyRelation",
    "GetAdvisoryRequest",
    "GetDependenciesRequest",
    "GetPackageRequest",
    "GetProjectPackageVersionsRequest",
    "GetProjectRequest",
    "GetRequirementsRequest",
    "GetVersionRequest",
    "Hash",
    "HashType",
    "InsightsStub",
    "Link",
    "Package",
    "PackageKey",
    "PackageVersion",
    "Project",
    "ProjectKey",
    "ProjectOssFuzzDetails",
    "ProjectPackageVersions",
    "ProjectPackageVersionsVersion",
    "ProjectRelationProvenance",
    "ProjectRelationType",
    "ProjectScorecard",
    "ProjectScorecardCheck",
    "ProjectScorecardCheckDocumentation",
    "ProjectScorecardRepository",
    "ProjectScorecardScorecardDetails",
    "QueryRequest",
    "QueryResult",
    "QueryResultResult",
    "Requirements",
    "RequirementsMaven",
    "RequirementsMavenDependency",
    "RequirementsMavenProfile",
    "RequirementsMavenProfileActivation",
    "RequirementsMavenProfileActivationFile",
    "RequirementsMavenProfileActivationJdk",
    "RequirementsMavenProfileActivationOs",
    "RequirementsMavenProfileActivationProperty",
    "RequirementsMavenProperty",
    "RequirementsMavenRepository",
    "RequirementsNpm",
    "RequirementsNpmBundle",
    "RequirementsNpmDependencies",
    "RequirementsNpmDependenciesDependency",
    "RequirementsNuGet",
    "RequirementsNuGetDependencyGroup",
    "RequirementsNuGetDependencyGroupDependency",
    "RequirementsRubyGems",
    "RequirementsRubyGemsDependency",
    "SlsaProvenance",
    "System",
    "Version",
    "VersionKey",
    "VersionProject",
)

import datetime
from dataclasses import dataclass

import betterproto2
import grpc

from ...message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class DependencyRelation(betterproto2.Enum):
    """
    DependencyRelation describes the relation of a node within a dependency
    graph.
    """

    DEPENDENCY_RELATION_UNSPECIFIED = 0

    SELF = 1

    DIRECT = 2

    INDIRECT = 3


class HashType(betterproto2.Enum):
    """
    HashType identifies a function used to produce a hash.
    """

    HASH_TYPE_UNSPECIFIED = 0

    MD5 = 1

    SHA1 = 2

    SHA256 = 3

    SHA512 = 4


class ProjectRelationProvenance(betterproto2.Enum):
    """
    How the mapping between project and package version was discovered.
    """

    UNKNOWN_PROJECT_RELATION_PROVENANCE = 0

    SLSA_ATTESTATION = 1
    """
    There is a SLSA attestation that links this package version to this project.
    """

    GO_ORIGIN = 2
    """
    This project contains the package version (Go specific).
    """

    PYPI_PUBLISH_ATTESTATION = 3
    """
    There is a [PyPI Publish
    attestation](https://docs.pypi.org/attestations/publish/v1/) that links
    this package version to this project.
    """

    UNVERIFIED_METADATA = 10
    """
    The package version's metadata contains an unverified link to this project.
    """


class ProjectRelationType(betterproto2.Enum):
    """
    ProjectRelationType specifies a relationship between a project and a package version.
    """

    UNKNOWN_PROJECT_RELATION_TYPE = 0

    SOURCE_REPO = 1
    """
    This project is this package version's source code repository.
    """

    ISSUE_TRACKER = 2
    """
    This project is the package version's issue tracker.
    """


class System(betterproto2.Enum):
    """
    System identifies a package management system.
    """

    SYSTEM_UNSPECIFIED = 0

    GO = 1

    RUBYGEMS = 2

    NPM = 3

    CARGO = 4

    MAVEN = 6

    PYPI = 7

    NUGET = 8


@dataclass(eq=False, repr=False)
class Advisory(betterproto2.Message):
    """
    Advisory holds information about a security advisory hosted by OSV.
    """

    advisory_key: "AdvisoryKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The identifier for the security advisory. Note that this may differ from
    the identifier in the request, due to canonicalization.
    """

    url: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The URL of the security advisory.
    """

    title: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    A brief human-readable description.
    """

    aliases: "list[str]" = betterproto2.field(4, betterproto2.TYPE_STRING, repeated=True)
    """
    Other identifiers used for the advisory, including CVEs.
    """

    cvss3_score: "float" = betterproto2.field(5, betterproto2.TYPE_FLOAT)
    """
    The severity of the advisory as a CVSS v3 score in the range [0,10].
    A higher score represents greater severity.
    """

    cvss3_vector: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    The severity of the advisory as a CVSS v3 vector string.
    """


default_message_pool.register_message("deps_dev.v3", "Advisory", Advisory)


@dataclass(eq=False, repr=False)
class AdvisoryKey(betterproto2.Message):
    """
    AdvisoryKey identifies a security advisory.
    """

    id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The OSV identifier for the security advisory.
    """


default_message_pool.register_message("deps_dev.v3", "AdvisoryKey", AdvisoryKey)


@dataclass(eq=False, repr=False)
class Attestation(betterproto2.Message):
    """
    Attestation represents a generic attestation. Fields are populated based
    on 'type'.
    """

    type: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The type of attestation.
    One of https://slsa.dev/provenance/v0.2, https://slsa.dev/provenance/v1,
    https://docs.pypi.org/attestations/publish/v1.
    """

    url: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The URL of the attestation if there is one.
    """

    verified: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    The attestation has been cryptographically verified by deps.dev.
    For attestations distributed in a Sigstore bundle, this field indicates
    the bundle was verified using the
    [sigstore-go](https://github.com/sigstore/sigstore-go) library.
    """

    source_repository: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Only set if type is https://slsa.dev/provenance/v0.2,
    https://slsa.dev/provenance/v1,
    https://docs.pypi.org/attestations/publish/v1.
    The source code repository used to build the version.
    """

    commit: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    The commit of the source code repository the version was built from.
    """


default_message_pool.register_message("deps_dev.v3", "Attestation", Attestation)


@dataclass(eq=False, repr=False)
class Dependencies(betterproto2.Message):
    """
    Dependencies holds a resolved dependency graph for a package version.

    The dependency graph should be similar to one produced by installing the
    package version on a generic 64-bit Linux system, with no other dependencies
    present. The precise meaning of this varies from system to system.
    """

    nodes: "list[DependenciesNode]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The nodes of the dependency graph. The first node is the root of the graph.
    """

    edges: "list[DependenciesEdge]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The edges of the dependency graph.
    """

    error: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Any error associated with the dependency graph that is not specific to a
    node. An error here may imply the graph as a whole is incorrect.
    This error message has no defined format and is intended for human
    consumption.
    """


default_message_pool.register_message("deps_dev.v3", "Dependencies", Dependencies)


@dataclass(eq=False, repr=False)
class DependenciesEdge(betterproto2.Message):
    """
    Edge represents a directed edge in a resolved dependency graph: a
    dependency relation between two nodes.
    """

    from_node: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The node declaring the dependency, specified as an index into the list of
    nodes.
    """

    to_node: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)
    """
    The node resolving the dependency, specified as an index into the list of
    nodes.
    """

    requirement: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The requirement resolved by this edge, as declared by the "from" node.
    The meaning of this field is system-specific. As an example, in npm, the
    requirement "^1.0.0" may be resolved by the version "1.2.3".
    """


default_message_pool.register_message("deps_dev.v3", "Dependencies.Edge", DependenciesEdge)


@dataclass(eq=False, repr=False)
class DependenciesNode(betterproto2.Message):
    """
    Node represents a node in a resolved dependency graph.
    """

    version_key: "VersionKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The package version represented by this node. Note that the package and
    version name may differ from the names in the request, if provided, due
    to canonicalization.

    In some systems, a graph may contain multiple nodes for the same package
    version.
    """

    bundled: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If true, this is a bundled dependency.

    For bundled dependencies, the package name in the version key encodes
    how the dependency is bundled. As an example, a bundled dependency with
    a name like "a>1.2.3>b>c" is part of the dependency graph of package "a"
    at version "1.2.3", and has the local name "c". It may or may not be the
    same as a package with the global name "c".
    """

    relation: "DependencyRelation" = betterproto2.field(
        4, betterproto2.TYPE_ENUM, default_factory=lambda: DependencyRelation(0)
    )
    """
    Whether this node represents a direct or indirect dependency within this
    dependency graph. Note that it's possible for a dependency to be both
    direct and indirect; if so, it is marked as direct.
    """

    errors: "list[str]" = betterproto2.field(3, betterproto2.TYPE_STRING, repeated=True)
    """
    Errors associated with this node of the graph, such as an unresolved
    dependency requirement. An error on a node may imply the graph as a
    whole is incorrect. These error messages have no defined format and are
    intended for human consumption.
    """


default_message_pool.register_message("deps_dev.v3", "Dependencies.Node", DependenciesNode)


@dataclass(eq=False, repr=False)
class GetAdvisoryRequest(betterproto2.Message):
    """
    GetAdvisoryRequest identifies a security advisory for which to return
    information.
    """

    advisory_key: "AdvisoryKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)


default_message_pool.register_message("deps_dev.v3", "GetAdvisoryRequest", GetAdvisoryRequest)


@dataclass(eq=False, repr=False)
class GetDependenciesRequest(betterproto2.Message):
    """
    GetDependenciesRequest identifies a package version for which to return
    dependencies.
    """

    version_key: "VersionKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)


default_message_pool.register_message("deps_dev.v3", "GetDependenciesRequest", GetDependenciesRequest)


@dataclass(eq=False, repr=False)
class GetPackageRequest(betterproto2.Message):
    """
    GetPackageRequest identifies a package for which to return information.
    """

    package_key: "PackageKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)


default_message_pool.register_message("deps_dev.v3", "GetPackageRequest", GetPackageRequest)


@dataclass(eq=False, repr=False)
class GetProjectPackageVersionsRequest(betterproto2.Message):
    project_key: "ProjectKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)


default_message_pool.register_message(
    "deps_dev.v3", "GetProjectPackageVersionsRequest", GetProjectPackageVersionsRequest
)


@dataclass(eq=False, repr=False)
class GetProjectRequest(betterproto2.Message):
    """
    GetProjectRequest identifies a project for which to return information.
    """

    project_key: "ProjectKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)


default_message_pool.register_message("deps_dev.v3", "GetProjectRequest", GetProjectRequest)


@dataclass(eq=False, repr=False)
class GetRequirementsRequest(betterproto2.Message):
    """
    GetRequirementsRequest identifies a version for which to return
    requirements.
    """

    version_key: "VersionKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)


default_message_pool.register_message("deps_dev.v3", "GetRequirementsRequest", GetRequirementsRequest)


@dataclass(eq=False, repr=False)
class GetVersionRequest(betterproto2.Message):
    """
    GetVersionRequest identifies a package version for which to return information.
    """

    version_key: "VersionKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)


default_message_pool.register_message("deps_dev.v3", "GetVersionRequest", GetVersionRequest)


@dataclass(eq=False, repr=False)
class Hash(betterproto2.Message):
    """
    Hash represents the output of a hash function. These messages are used to
    identify package version artifacts by content hash.
    """

    type: "HashType" = betterproto2.field(1, betterproto2.TYPE_ENUM, default_factory=lambda: HashType(0))
    """
    The function used to produce this hash.
    """

    value: "bytes" = betterproto2.field(2, betterproto2.TYPE_BYTES)
    """
    A hash value.
    """


default_message_pool.register_message("deps_dev.v3", "Hash", Hash)


@dataclass(eq=False, repr=False)
class Link(betterproto2.Message):
    """
    Link represents a link declared by or derived from package version metadata,
    to an external web resource such as a homepage or source code repository.
    """

    label: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    A label describing the resource that the link points to.
    """

    url: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The URL of the link.
    """


default_message_pool.register_message("deps_dev.v3", "Link", Link)


@dataclass(eq=False, repr=False)
class Package(betterproto2.Message):
    """
    Package holds information about a package, including a list of its available
    versions, with the default version marked if known.
    """

    package_key: "PackageKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The name of the package. Note that it may differ from the name in the
    request, due to canonicalization.
    """

    versions: "list[PackageVersion]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The available versions of the package.
    """


default_message_pool.register_message("deps_dev.v3", "Package", Package)


@dataclass(eq=False, repr=False)
class PackageVersion(betterproto2.Message):
    version_key: "VersionKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The name of the version. Note that the package name may differ from the
    name in the request, due to canonicalization.
    """

    published_at: "datetime.datetime | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, unwrap=lambda: __google__protobuf__.Timestamp, optional=True
    )
    """
    The time when this package version was published, if available, as
    reported by the package management authority.
    """

    is_default: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If true, this is the default version of the package: the version that is
    installed when no version is specified. The precise meaning of this is
    system-specific, but it is commonly the version with the greatest
    version number, ignoring pre-release versions.
    """


default_message_pool.register_message("deps_dev.v3", "Package.Version", PackageVersion)


@dataclass(eq=False, repr=False)
class PackageKey(betterproto2.Message):
    """
    PackageKey identifies a package by name.
    """

    system: "System" = betterproto2.field(1, betterproto2.TYPE_ENUM, default_factory=lambda: System(0))
    """
    The package management system containing the package.
    """

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The name of the package.
    """


default_message_pool.register_message("deps_dev.v3", "PackageKey", PackageKey)


@dataclass(eq=False, repr=False)
class Project(betterproto2.Message):
    """
    Project holds information about a project hosted by GitHub, GitLab, or
    Bitbucket.
    """

    project_key: "ProjectKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The identifier for the project. Note that this may differ from the
    identifier in the request, due to canonicalization.
    """

    open_issues_count: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    The number of open issues reported by the project host.
    Only available for GitHub and GitLab.
    """

    stars_count: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    The number of stars reported by the project host.
    Only available for GitHub and GitLab.
    """

    forks_count: "int" = betterproto2.field(4, betterproto2.TYPE_INT32)
    """
    The number of forks reported by the project host.
    Only available for GitHub and GitLab.
    """

    license: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    The license reported by the project host.
    """

    description: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    The description reported by the project host.
    """

    homepage: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)
    """
    The homepage reported by the project host.
    """

    scorecard: "ProjectScorecard | None" = betterproto2.field(8, betterproto2.TYPE_MESSAGE, optional=True)
    """
    An [OpenSSF Scorecard](https://github.com/ossf/scorecard) for the project,
    if one is available.
    """

    oss_fuzz: "ProjectOssFuzzDetails | None" = betterproto2.field(9, betterproto2.TYPE_MESSAGE, optional=True)
    """
    Details of this project's testing by the
    [OSS-Fuzz service](https://google.github.io/oss-fuzz/).
    Only set if the project is tested by OSS-Fuzz.
    """


default_message_pool.register_message("deps_dev.v3", "Project", Project)


@dataclass(eq=False, repr=False)
class ProjectOssFuzzDetails(betterproto2.Message):
    line_count: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)
    """
    The total number of lines of code in the project.
    """

    line_cover_count: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    The number of lines of code covered by fuzzing.
    """

    date: "datetime.datetime | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, unwrap=lambda: __google__protobuf__.Timestamp, optional=True
    )
    """
    The date the fuzz test that produced the coverage information was run
    against this project.
    The time portion of this field is midnight UTC.
    """

    config_url: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    The URL containing the configuration for the project in the
    OSS-Fuzz repository.
    """


default_message_pool.register_message("deps_dev.v3", "Project.OSSFuzzDetails", ProjectOssFuzzDetails)


@dataclass(eq=False, repr=False)
class ProjectScorecard(betterproto2.Message):
    date: "datetime.datetime | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, unwrap=lambda: __google__protobuf__.Timestamp, optional=True
    )
    """
    The date at which the scorecard was produced.
    The time portion of this field is midnight UTC.
    """

    repository: "ProjectScorecardRepository | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The source code repository and commit the scorecard was produced from.
    """

    scorecard: "ProjectScorecardScorecardDetails | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The version and commit of the Scorecard program used to produce the
    scorecard.
    """

    checks: "list[ProjectScorecardCheck]" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The results of the
    [Scorecard Checks](https://github.com/ossf/scorecard#scorecard-checks)
    performed on the project.
    """

    overall_score: "float" = betterproto2.field(5, betterproto2.TYPE_FLOAT)
    """
    A weighted average score in the range [0,10]. A higher score is better.
    """

    metadata: "list[str]" = betterproto2.field(6, betterproto2.TYPE_STRING, repeated=True)
    """
    Additional metadata associated with the scorecard.
    """


default_message_pool.register_message("deps_dev.v3", "Project.Scorecard", ProjectScorecard)


@dataclass(eq=False, repr=False)
class ProjectScorecardCheck(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the check.
    """

    documentation: "ProjectScorecardCheckDocumentation | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Human-readable documentation for the check.
    """

    score: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    A score in the range [0,10]. A higher score is better.
    A negative score indicates that the check did not run successfully.
    """

    reason: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    The reason for the score.
    """

    details: "list[str]" = betterproto2.field(5, betterproto2.TYPE_STRING, repeated=True)
    """
    Further details regarding the check.
    """


default_message_pool.register_message("deps_dev.v3", "Project.Scorecard.Check", ProjectScorecardCheck)


@dataclass(eq=False, repr=False)
class ProjectScorecardCheckDocumentation(betterproto2.Message):
    short_description: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    A short description of the check.
    """

    url: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    A link to more details about the check.
    """


default_message_pool.register_message(
    "deps_dev.v3", "Project.Scorecard.Check.Documentation", ProjectScorecardCheckDocumentation
)


@dataclass(eq=False, repr=False)
class ProjectScorecardRepository(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The source code repository the scorecard was produced from.
    """

    commit: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The source code commit the scorecard was produced from.
    """


default_message_pool.register_message("deps_dev.v3", "Project.Scorecard.Repository", ProjectScorecardRepository)


@dataclass(eq=False, repr=False)
class ProjectScorecardScorecardDetails(betterproto2.Message):
    version: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The version of the Scorecard program used to produce the scorecard.
    """

    commit: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The commit of the Scorecard program used to produce the scorecard.
    """


default_message_pool.register_message(
    "deps_dev.v3", "Project.Scorecard.ScorecardDetails", ProjectScorecardScorecardDetails
)


@dataclass(eq=False, repr=False)
class ProjectKey(betterproto2.Message):
    """
    ProjectKey identifies a project.
    """

    id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    A project identifier of the form `github.com/user/repo`,
    `gitlab.com/user/repo`, or `bitbucket.org/user/repo`.
    """


default_message_pool.register_message("deps_dev.v3", "ProjectKey", ProjectKey)


@dataclass(eq=False, repr=False)
class ProjectPackageVersions(betterproto2.Message):
    versions: "list[ProjectPackageVersionsVersion]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The versions that were built from the source code contained in this
    project.
    """


default_message_pool.register_message("deps_dev.v3", "ProjectPackageVersions", ProjectPackageVersions)


@dataclass(eq=False, repr=False)
class ProjectPackageVersionsVersion(betterproto2.Message):
    version_key: "VersionKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The identifier for the version.
    """

    slsa_provenances: "list[SlsaProvenance]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The SLSA provenance statements that link the version to the project. This
    is only populated for npm package versions. See the 'attestations' field
    for more attestations (including SLSA provenance) for all systems.
    """

    attestations: "list[Attestation]" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Attestations that link the version to the project.
    """

    relation_type: "ProjectRelationType" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, default_factory=lambda: ProjectRelationType(0)
    )
    """
    What the relationship between the project and the package version is.
    """

    relation_provenance: "ProjectRelationProvenance" = betterproto2.field(
        4, betterproto2.TYPE_ENUM, default_factory=lambda: ProjectRelationProvenance(0)
    )
    """
    How the mapping between project and package version was discovered.
    """


default_message_pool.register_message("deps_dev.v3", "ProjectPackageVersions.Version", ProjectPackageVersionsVersion)


@dataclass(eq=False, repr=False)
class QueryRequest(betterproto2.Message):
    """
    QueryRequest identifies package versions for which to return information.
    At least one of its fields must be set, and both fields may be set to narrow
    the results.
    """

    hash: "Hash | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    A content hash for an artifact associated with a package version, such as a
    JAR file. Currently supported for npm, Cargo, Maven, and NuGet. Note that
    hashes and package versions have a many-to-many relationship.
    """

    version_key: "VersionKey | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The name of the package version.
    """


default_message_pool.register_message("deps_dev.v3", "QueryRequest", QueryRequest)


@dataclass(eq=False, repr=False)
class QueryResult(betterproto2.Message):
    """
    QueryResult holds information about package versions matching the query.
    """

    results: "list[QueryResultResult]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Results matching the query. At most 1000 results are returned.
    """


default_message_pool.register_message("deps_dev.v3", "QueryResult", QueryResult)


@dataclass(eq=False, repr=False)
class QueryResultResult(betterproto2.Message):
    version: "Version | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)


default_message_pool.register_message("deps_dev.v3", "QueryResult.Result", QueryResultResult)


@dataclass(eq=False, repr=False)
class Requirements(betterproto2.Message):
    """
    Requirements contains a system-specific representation of the requirements
    specified by a package version. Only one of its fields will be set.
    """

    nuget: "RequirementsNuGet | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The NuGet-specific representation of the version's requirements.

    Note that the term "dependency" is used here to mean "a single unresolved
    requirement" to be consistent with how the term is used in the NuGet
    ecosystem. This is different to how it is used elsewhere in the deps.dev
    API.
    """

    npm: "RequirementsNpm | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The npm-specific representation of the version's requirements.

    Note that the term "dependency" is used here to mean "a single unresolved
    requirement" to be consistent with how the term is used in the npm
    ecosystem. This is different to how it is used elsewhere in the deps.dev
    API.
    """

    maven: "RequirementsMaven | None" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The Maven-specific representation of the version's requirements.

    Note that the term "dependency" is used here to mean "a single unresolved
    requirement" to be consistent with how the term is used in the Maven
    ecosystem. This is different to how it is used elsewhere in the deps.dev
    API.

    This data is as it is declared in a version POM file. The data in parent
    POMs are not merged.
    Any string field may contain references to properties, and the properties
    are not interpolated.
    """

    rubygems: "RequirementsRubyGems | None" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The RubyGems-specific representation of the version's requirements.

    Note that the term "dependency" is used here to mean "a single unresolved
    requirement" to be consistent with how the term is used in the npm
    ecosystem. This is different to how it is used elsewhere in the deps.dev
    API.
    """


default_message_pool.register_message("deps_dev.v3", "Requirements", Requirements)


@dataclass(eq=False, repr=False)
class RequirementsMaven(betterproto2.Message):
    parent: "VersionKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The direct parent of a package version.
    """

    dependencies: "list[RequirementsMavenDependency]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of dependencies.
    """

    dependency_management: "list[RequirementsMavenDependency]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of dependency management.
    The format is the same as dependencies.
    """

    properties: "list[RequirementsMavenProperty]" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of properties, used to resolve placeholders.
    """

    repositories: "list[RequirementsMavenRepository]" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of repositories.
    """

    profiles: "list[RequirementsMavenProfile]" = betterproto2.field(6, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The list of profiles.
    """


default_message_pool.register_message("deps_dev.v3", "Requirements.Maven", RequirementsMaven)


@dataclass(eq=False, repr=False)
class RequirementsMavenDependency(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the package.
    """

    version: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The version requirement of the dependency.
    """

    classifier: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The classifier of the dependency, which distinguishes artifacts that
    differ in content.
    """

    type: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    The type of the dependency, defaults to jar.
    """

    scope: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    The scope of the dependency, specifies how to limit the transitivity
    of a dependency.
    """

    optional: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    Whether the dependency is optional or not.
    """

    exclusions: "list[str]" = betterproto2.field(7, betterproto2.TYPE_STRING, repeated=True)
    """
    The dependencies to be excluded, in the form of a list of package
    names.
    Exclusions may contain wildcards in both groupID and artifactID.
    """


default_message_pool.register_message("deps_dev.v3", "Requirements.Maven.Dependency", RequirementsMavenDependency)


@dataclass(eq=False, repr=False)
class RequirementsMavenProfile(betterproto2.Message):
    id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The ID of the profile.
    """

    activation: "RequirementsMavenProfileActivation | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The activation requirement of the profile.
    """

    dependencies: "list[RequirementsMavenDependency]" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The dependencies specified in the profile.
    """

    dependency_management: "list[RequirementsMavenDependency]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The dependency management specified in the profile.
    """

    properties: "list[RequirementsMavenProperty]" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The properties specified in the profile.
    """

    repositories: "list[RequirementsMavenRepository]" = betterproto2.field(6, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    The repositories specified in the profile.
    """


default_message_pool.register_message("deps_dev.v3", "Requirements.Maven.Profile", RequirementsMavenProfile)


@dataclass(eq=False, repr=False)
class RequirementsMavenProfileActivation(betterproto2.Message):
    active_by_default: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Whether the profile is active by default.
    """

    jdk: "RequirementsMavenProfileActivationJdk | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The JDK requirement of the activation.
    """

    os: "RequirementsMavenProfileActivationOs | None" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The operating system requirement of the activation.
    """

    property: "RequirementsMavenProfileActivationProperty | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The property requirement of the activation.
    """

    file: "RequirementsMavenProfileActivationFile | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The file requirement of the activation.
    """


default_message_pool.register_message(
    "deps_dev.v3", "Requirements.Maven.Profile.Activation", RequirementsMavenProfileActivation
)


@dataclass(eq=False, repr=False)
class RequirementsMavenProfileActivationFile(betterproto2.Message):
    exists: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the file that its existence activates the profile.
    """

    missing: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The name of the file, activate the profile if the file is missing.
    """


default_message_pool.register_message(
    "deps_dev.v3", "Requirements.Maven.Profile.Activation.File", RequirementsMavenProfileActivationFile
)


@dataclass(eq=False, repr=False)
class RequirementsMavenProfileActivationJdk(betterproto2.Message):
    jdk: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The JDK requirement to activate the profile.
    """


default_message_pool.register_message(
    "deps_dev.v3", "Requirements.Maven.Profile.Activation.JDK", RequirementsMavenProfileActivationJdk
)


@dataclass(eq=False, repr=False)
class RequirementsMavenProfileActivationOs(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the operating system.
    """

    family: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The family of the operating system.
    """

    arch: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The CPU architecture of the operating system,
    """

    version: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    The version of the operating system.
    """


default_message_pool.register_message(
    "deps_dev.v3", "Requirements.Maven.Profile.Activation.OS", RequirementsMavenProfileActivationOs
)


@dataclass(eq=False, repr=False)
class RequirementsMavenProfileActivationProperty(betterproto2.Message):
    property: "RequirementsMavenProperty | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The property requirement to activate the profile.
    This can be a system property or CLI user property.
    """


default_message_pool.register_message(
    "deps_dev.v3", "Requirements.Maven.Profile.Activation.Property", RequirementsMavenProfileActivationProperty
)


@dataclass(eq=False, repr=False)
class RequirementsMavenProperty(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the property.
    """

    value: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The value of the property.
    """


default_message_pool.register_message("deps_dev.v3", "Requirements.Maven.Property", RequirementsMavenProperty)


@dataclass(eq=False, repr=False)
class RequirementsMavenRepository(betterproto2.Message):
    id: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The ID of the repository.
    """

    url: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The URL of the repository.
    """

    layout: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Whether the description of the repository follows a common layout.
    """

    releases_enabled: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Whether the repository is enabled for release downloads.
    """

    snapshots_enabled: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    Whether the repository is enabled for snapshot downloads.
    """


default_message_pool.register_message("deps_dev.v3", "Requirements.Maven.Repository", RequirementsMavenRepository)


@dataclass(eq=False, repr=False)
class RequirementsNpm(betterproto2.Message):
    dependencies: "RequirementsNpmDependencies | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The dependency-related fields declared in the requested package version's
    package.json.
    """

    bundled: "list[RequirementsNpmBundle]" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Contents of any additional package.json files found inside the
    "node_modules" folder of the version's tarball, including nested
    "node_modules".
    """


default_message_pool.register_message("deps_dev.v3", "Requirements.NPM", RequirementsNpm)


@dataclass(eq=False, repr=False)
class RequirementsNpmBundle(betterproto2.Message):
    path: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The path inside the tarball where this dependency was found.
    """

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The name of the bundled package, as declared inside the bundled
    package.json.
    """

    version: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The version of this package, as declared inside the bundled
    package.json.
    """

    dependencies: "RequirementsNpmDependencies | None" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The dependency-related fields from the bundled package.json.
    """


default_message_pool.register_message("deps_dev.v3", "Requirements.NPM.Bundle", RequirementsNpmBundle)


@dataclass(eq=False, repr=False)
class RequirementsNpmDependencies(betterproto2.Message):
    dependencies: "list[RequirementsNpmDependenciesDependency]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The "dependencies" field of a package.json, represented as a list of
    name, requirement pairs.
    """

    dev_dependencies: "list[RequirementsNpmDependenciesDependency]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The "devDependencies" field of a package.json. The format is the
    same as "dependencies".
    """

    optional_dependencies: "list[RequirementsNpmDependenciesDependency]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The "optionalDependencies" field of a package.json. The format is
    the same as "dependencies".
    """

    peer_dependencies: "list[RequirementsNpmDependenciesDependency]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The "peerDependencies" field of a package.json. The format is the
    same as "dependencies".
    """

    bundle_dependencies: "list[str]" = betterproto2.field(5, betterproto2.TYPE_STRING, repeated=True)
    """
    The "bundleDependencies" field of a package.json: a list of package
    names. In the package.json this may also just be the boolean value
    "true", in which case this field will contain the names of all the
    dependencies from the "dependencies" field.
    """


default_message_pool.register_message("deps_dev.v3", "Requirements.NPM.Dependencies", RequirementsNpmDependencies)


@dataclass(eq=False, repr=False)
class RequirementsNpmDependenciesDependency(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the package, the key in the original object.
    """

    requirement: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The requirement, the corresponding value from the original object.
    """


default_message_pool.register_message(
    "deps_dev.v3", "Requirements.NPM.Dependencies.Dependency", RequirementsNpmDependenciesDependency
)


@dataclass(eq=False, repr=False)
class RequirementsNuGet(betterproto2.Message):
    dependency_groups: "list[RequirementsNuGetDependencyGroup]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The requirements grouped by target framework.
    """


default_message_pool.register_message("deps_dev.v3", "Requirements.NuGet", RequirementsNuGet)


@dataclass(eq=False, repr=False)
class RequirementsNuGetDependencyGroup(betterproto2.Message):
    target_framework: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The target framework that this dependency group is for.
    """

    dependencies: "list[RequirementsNuGetDependencyGroupDependency]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The requirements belonging to this dependency group.
    """


default_message_pool.register_message(
    "deps_dev.v3", "Requirements.NuGet.DependencyGroup", RequirementsNuGetDependencyGroup
)


@dataclass(eq=False, repr=False)
class RequirementsNuGetDependencyGroupDependency(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the package.
    """

    requirement: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The requirement on the package.
    """


default_message_pool.register_message(
    "deps_dev.v3", "Requirements.NuGet.DependencyGroup.Dependency", RequirementsNuGetDependencyGroupDependency
)


@dataclass(eq=False, repr=False)
class RequirementsRubyGems(betterproto2.Message):
    runtime_dependencies: "list[RequirementsRubyGemsDependency]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of runtime dependencies.
    """

    dev_dependencies: "list[RequirementsRubyGemsDependency]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of development dependencies.
    """


default_message_pool.register_message("deps_dev.v3", "Requirements.RubyGems", RequirementsRubyGems)


@dataclass(eq=False, repr=False)
class RequirementsRubyGemsDependency(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the package.
    """

    requirement: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The requirement on the package.
    """


default_message_pool.register_message("deps_dev.v3", "Requirements.RubyGems.Dependency", RequirementsRubyGemsDependency)


@dataclass(eq=False, repr=False)
class SlsaProvenance(betterproto2.Message):
    """
    SLSAProvenance contains provenance information extracted from a SLSA
    provenance statement.
    """

    source_repository: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The source code repository used to build the version.
    """

    commit: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The commit of the source code repository the version was built from.
    """

    url: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The URL of the provenance statement if there is one.
    """

    verified: "bool" = betterproto2.field(4, betterproto2.TYPE_BOOL)
    """
    The Sigstore bundle containing this attestation was verified using the
    [sigstore-go](https://github.com/sigstore/sigstore-go) library.
    """


default_message_pool.register_message("deps_dev.v3", "SLSAProvenance", SlsaProvenance)


@dataclass(eq=False, repr=False)
class Version(betterproto2.Message):
    """
    Version holds information about a package version.
    """

    version_key: "VersionKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The name of the package version. Note that the package and version name
    may differ from names specified in requests, if applicable, due to
    canonicalization.
    """

    published_at: "datetime.datetime | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, unwrap=lambda: __google__protobuf__.Timestamp, optional=True
    )
    """
    The time when this package version was published, if available, as
    reported by the package management authority.
    """

    is_default: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If true, this is the default version of the package: the version that is
    installed when no version is specified. The precise meaning of this is
    system-specific, but it is commonly the version with the greatest version
    number, ignoring pre-release versions.
    """

    licenses: "list[str]" = betterproto2.field(3, betterproto2.TYPE_STRING, repeated=True)
    """
    The licenses governing the use of this package version.

    We identify licenses as
    [SPDX 2.1](https://spdx.dev/spdx-specification-21-web-version/)
    expressions. When there is no associated SPDX identifier, we identify a
    license as "non-standard". When we are unable to obtain license
    information, this field is empty. When more than one license is listed,
    their relationship is unspecified.

    For Cargo, Maven, npm, NuGet, PyPI, and RubyGems, license information is
    read from the package metadata. For Go, license information is determined
    using the [licensecheck](https://github.com/google/licensecheck) package.

    License information is not intended to be legal advice, and you should
    independently verify the license or terms of any software for your own
    needs.
    """

    advisory_keys: "list[AdvisoryKey]" = betterproto2.field(4, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Security advisories known to affect this package version directly. Further
    information can be requested using the Advisory method.

    Note that this field does not include advisories that affect dependencies
    of this package version.
    """

    links: "list[Link]" = betterproto2.field(5, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Links declared by or derived from package version metadata, to external
    web resources such as a homepage or source code repository. Note that
    these links are not verified for correctness.
    """

    slsa_provenances: "list[SlsaProvenance]" = betterproto2.field(7, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    SLSA provenance information for this package version. Extracted from a
    SLSA provenance attestation. This is only populated for npm package
    versions. See the 'attestations' field for more attestations (including
    SLSA provenance) for all systems.
    """

    attestations: "list[Attestation]" = betterproto2.field(14, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Attestations for this package version.
    """

    registries: "list[str]" = betterproto2.field(8, betterproto2.TYPE_STRING, repeated=True)
    """
    URLs for the package management registries this package version is
    available from.
    Only set for systems that use a central repository for package
    distribution: Cargo, Maven, npm, NuGet, PyPI and RubyGems.
    """

    related_projects: "list[VersionProject]" = betterproto2.field(10, betterproto2.TYPE_MESSAGE, repeated=True)
    """
    Projects that are related to this package version.
    """


default_message_pool.register_message("deps_dev.v3", "Version", Version)


@dataclass(eq=False, repr=False)
class VersionProject(betterproto2.Message):
    project_key: "ProjectKey | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    """
    The identifier for the project.
    """

    relation_provenance: "ProjectRelationProvenance" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, default_factory=lambda: ProjectRelationProvenance(0)
    )
    """
    How the mapping between project and package version was discovered.
    """

    relation_type: "ProjectRelationType" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, default_factory=lambda: ProjectRelationType(0)
    )
    """
    What the relationship between the project and the package version is.
    """


default_message_pool.register_message("deps_dev.v3", "Version.Project", VersionProject)


@dataclass(eq=False, repr=False)
class VersionKey(betterproto2.Message):
    """
    VersionKey identifies a package version by name.
    """

    system: "System" = betterproto2.field(1, betterproto2.TYPE_ENUM, default_factory=lambda: System(0))
    """
    The package management system containing the package.
    """

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The name of the package.
    """

    version: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The version of the package.
    """


default_message_pool.register_message("deps_dev.v3", "VersionKey", VersionKey)


class InsightsStub:
    """
    The Deps.dev Insights API provides information about open source software
    packages, projects, and security advisories. The information is gathered
    from upstream services like npm, GitHub, and OSV, and augmented by computing
    dependencies and relationships between entities.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_package(self, message: "GetPackageRequest") -> "Package":
        """
        GetPackage returns information about a package, including a list of its
        available versions, with the default version marked if known.
        """

        return self._channel.unary_unary(
            "/deps_dev.v3.Insights/GetPackage",
            GetPackageRequest.SerializeToString,
            Package.FromString,
        )(message)

    def get_version(self, message: "GetVersionRequest") -> "Version":
        """
        GetVersion returns information about a specific package version, including
        its licenses and any security advisories known to affect it.
        """

        return self._channel.unary_unary(
            "/deps_dev.v3.Insights/GetVersion",
            GetVersionRequest.SerializeToString,
            Version.FromString,
        )(message)

    def get_requirements(self, message: "GetRequirementsRequest") -> "Requirements":
        """
        GetRequirements returns the requirements for a given version in a
        system-specific format. Requirements are currently available for
        Maven, npm, NuGet and RubyGems.

        Requirements are the dependency constraints specified by the version.
        """

        return self._channel.unary_unary(
            "/deps_dev.v3.Insights/GetRequirements",
            GetRequirementsRequest.SerializeToString,
            Requirements.FromString,
        )(message)

    def get_dependencies(self, message: "GetDependenciesRequest") -> "Dependencies":
        """
        GetDependencies returns a resolved dependency graph for the given package
        version. Dependencies are currently available for Go, npm, Cargo, Maven
        and PyPI.

        Dependencies are the resolution of the requirements (dependency
        constraints) specified by a version.

        The dependency graph should be similar to one produced by installing the
        package version on a generic 64-bit Linux system, with no other
        dependencies present. The precise meaning of this varies from system to
        system.
        """

        return self._channel.unary_unary(
            "/deps_dev.v3.Insights/GetDependencies",
            GetDependenciesRequest.SerializeToString,
            Dependencies.FromString,
        )(message)

    def get_project(self, message: "GetProjectRequest") -> "Project":
        """
        GetProject returns information about projects hosted by GitHub, GitLab, or
        BitBucket, when known to us.
        """

        return self._channel.unary_unary(
            "/deps_dev.v3.Insights/GetProject",
            GetProjectRequest.SerializeToString,
            Project.FromString,
        )(message)

    def get_project_package_versions(self, message: "GetProjectPackageVersionsRequest") -> "ProjectPackageVersions":
        """
        GetProjectPackageVersions returns known mappings between the requested
        project and package versions.
        At most 1500 package versions are returned. Mappings which were derived
        from attestations are served first.
        """

        return self._channel.unary_unary(
            "/deps_dev.v3.Insights/GetProjectPackageVersions",
            GetProjectPackageVersionsRequest.SerializeToString,
            ProjectPackageVersions.FromString,
        )(message)

    def get_advisory(self, message: "GetAdvisoryRequest") -> "Advisory":
        """
        GetAdvisory returns information about security advisories hosted by OSV.
        """

        return self._channel.unary_unary(
            "/deps_dev.v3.Insights/GetAdvisory",
            GetAdvisoryRequest.SerializeToString,
            Advisory.FromString,
        )(message)

    def query(self, message: "QueryRequest") -> "QueryResult":
        """
        Query returns information about multiple package versions, which can be
        specified by name, content hash, or both. If a hash was specified in the
        request, it returns the artifacts that matched the hash.

        Querying by content hash is currently supported for npm, Cargo, Maven,
        NuGet, PyPI and RubyGems. It is typical for hash queries to return many
        results; hashes are matched against multiple release artifacts (such as
        JAR files) that comprise package versions, and any given artifact may
        appear in several package versions.
        """

        return self._channel.unary_unary(
            "/deps_dev.v3.Insights/Query",
            QueryRequest.SerializeToString,
            QueryResult.FromString,
        )(message)


from ...google import protobuf as __google__protobuf__
